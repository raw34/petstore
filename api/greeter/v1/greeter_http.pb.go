// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type GreeterHTTPServer interface {
	GreeterSayHello(context.Context, *GreeterSayHelloRequest) (*GreeterV1HelloReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.GET("/greeter/{name}", _Greeter_GreeterSayHello0_HTTP_Handler(srv))
}

func _Greeter_GreeterSayHello0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GreeterSayHelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/greeter.Greeter/GreeterSayHello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GreeterSayHello(ctx, req.(*GreeterSayHelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GreeterV1HelloReply)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	GreeterSayHello(ctx context.Context, req *GreeterSayHelloRequest, opts ...http.CallOption) (rsp *GreeterV1HelloReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) GreeterSayHello(ctx context.Context, in *GreeterSayHelloRequest, opts ...http.CallOption) (*GreeterV1HelloReply, error) {
	var out GreeterV1HelloReply
	pattern := "/greeter/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/greeter.Greeter/GreeterSayHello"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
